html

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Controle de Estoque</title>
    <link rel="stylesheet" href="style.css">
    <link rel="manifest" href="manifest.json">
    <!-- Bibliotecas Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Biblioteca jsPDF -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
    <!-- Biblioteca SheetJS para Excel -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
</head>
<body data-theme="light">
    <div class="app-container">
        <div class="sidebar">
            <div class="logo-container">
                <img src="logo.png" alt="Logo" class="logo">
                <span class="app-name">Controle de Estoque</span>
            </div>
            <button id="toggleSidebar" class="toggle-btn">
                <span class="toggle-icon">&#9776;</span>
            </button>
            <ul class="sidebar-menu">
                <li data-tab="dashboard" class="active">
                    <div class="menu-icon">üìä</div>
                    <span>Dashboard</span>
                </li>
                <li data-tab="inventory">
                    <div class="menu-icon">üì¶</div>
                    <span>Estoque</span>
                    <span id="lowStockBadge" class="badge">0</span>
                </li>
                <li data-tab="sales">
                    <div class="menu-icon">üí≤</div>
                    <span>Vendas</span>
                </li>
                <li data-tab="suppliers">
                    <div class="menu-icon">üè≠</div>
                    <span>Fornecedores</span>
                </li>
                <li data-tab="reports">
                    <div class="menu-icon">üìù</div>
                    <span>Relat√≥rios</span>
                </li>
                <li data-tab="settings">
                    <div class="menu-icon">‚öôÔ∏è</div>
                    <span>Configura√ß√µes</span>
                </li>
            </ul>
            <div class="sidebar-footer">
                <button id="themeToggle" class="theme-toggle">üåô</button>
            </div>
        </div>
        
        <div class="main-content">
            <header>
                <h1 id="currentTabTitle">Dashboard</h1>
                <div class="user-info">
                    <span>Ol√°, Admin</span>
                </div>
            </header>
            
            <!-- Dashboard -->
            <div id="dashboard" class="tab-content active">
                <div class="cards-container">
                    <div class="card">
                        <div class="card-title">Total em Estoque</div>
                        <div class="card-value" id="totalEmEstoque">R$ 0.00</div>
                    </div>
                    <div class="card">
                        <div class="card-title">Valor Total (Compras)</div>
                        <div class="card-value" id="valorTotalCompras">R$ 0.00</div>
                    </div>
                    <div class="card">
                        <div class="card-title">Valor Potencial (Vendas)</div>
                        <div class="card-value" id="valorPotencialVendas">R$ 0.00</div>
                    </div>
                    <div class="card">
                        <div class="card-title">Itens em Estoque Baixo</div>
                        <div class="card-value" id="lowStockItems">0</div>
                    </div>
                </div>
                
                <div class="dashboard-section">
                    <h2>Resumo do Estoque</h2>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Categoria</th>
                                <th>Qtd Itens</th>
                                <th>Valor Total</th>
                                <th>Valor Potencial</th>
                            </tr>
                        </thead>
                        <tbody id="stockSummaryTable">
                            <!-- Dados ser√£o inseridos aqui -->
                        </tbody>
                    </table>
                </div>
                
                <div class="dashboard-section">
                    <h2>√öltimas Vendas</h2>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Data</th>
                                <th>Itens</th>
                                <th>Total</th>
                                <th>Pagamento</th>
                            </tr>
                        </thead>
                        <tbody id="recentSalesTable">
                            <!-- Dados ser√£o inseridos aqui -->
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Estoque -->
            <div id="inventory" class="tab-content">
                <div class="section-header">
                    <h2>Gest√£o de Estoque</h2>
                    <div class="filters">
                        <select id="filterCategory" onchange="loadInventory()">
                            <option value="">Todas categorias</option>
                            <!-- Categorias ser√£o inseridas aqui pelo JavaScript -->
                        </select>
                        <input type="text" id="filterCode" placeholder="Buscar por c√≥digo..." oninput="loadInventory()">
                        <select id="filterSupplier" onchange="loadInventory()">
                            <option value="">Todos fornecedores</option>
                            <!-- Fornecedores ser√£o inseridos aqui pelo JavaScript -->
                        </select>
                        <select id="filterStock" onchange="loadInventory()">
                            <option value="">Qualquer estoque</option>
                            <option value="low">Estoque baixo</option>
                            <option value="normal">Estoque normal</option>
                        </select>
                        <button class="btn-primary" onclick="document.getElementById('itemForm').scrollIntoView({behavior: 'smooth'})">Novo Item</button>
                        <button class="btn-secondary" onclick="exportToExcel()">Exportar Excel</button>
                        <button class="btn-secondary" onclick="exportToPDF()">Exportar PDF</button>
                    </div>
                </div>
                
                <div class="summary-bar">
                    <div class="summary-item">
                        <span class="summary-label">Total de Itens:</span>
                        <span class="summary-value" id="totalItems">0</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Valor Total:</span>
                        <span class="summary-value" id="totalValue">R$ 0.00</span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Itens em Estoque Baixo:</span>
                        <span class="summary-value" id="lowStockItems">0</span>
                    </div>
                </div>
                
                <div class="table-container">
                    <table id="inventoryTable" class="data-table">
                        <thead>
                            <tr>
                                <th>C√≥digo</th>
                                <th>Foto</th>
                                <th>Nome</th>
                                <th>Fornecedor</th>
                                <th>Categoria</th>
                                <th>Subcategoria</th>
                                <th>Tamanho</th>
                                <th>Qtd</th>
                                <th>Compra (R$)</th>
                                <th>Venda (R$)</th>
                                <th>Total (R$)</th>
                                <th>A√ß√µes</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Dados do invent√°rio ser√£o inseridos aqui -->
                        </tbody>
                    </table>
                </div>
                
                <div class="section-divider"></div>
                
                <form id="itemForm" onsubmit="handleItemForm(event)" class="card-form">
                    <h3>Adicionar / Editar Item</h3>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="itemCode">C√≥digo*</label>
                            <input type="text" id="itemCode" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="itemName">Nome do Produto*</label>
                            <input type="text" id="itemName" required>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="itemSupplier">Fornecedor</label>
                            <select id="itemSupplier">
                                <option value="">Selecione...</option>
                                <!-- Fornecedores ser√£o inseridos aqui pelo JavaScript -->
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="itemCategory">Categoria*</label>
                            <select id="itemCategory" required onchange="toggleSizeField()">
                                <option value="">Selecione...</option>
                                <!-- Categorias ser√£o inseridas aqui pelo JavaScript -->
                            </select>
                            <button type="button" id="manageCategoriesBtn" class="btn-sm btn-secondary">Gerenciar</button>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="itemSubcategory">Subcategoria</label>
                            <input type="text" id="itemSubcategory">
                        </div>
                        
                        <div class="form-group" id="sizeGroup" style="display: none;">
                            <label for="itemSize">Tamanho</label>
                            <select id="itemSize">
                                <option value="">Selecione...</option>
                                <option value="PP">PP</option>
                                <option value="P">P</option>
                                <option value="M">M</option>
                                <option value="G">G</option>
                                <option value="GG">GG</option>
                                <option value="XG">XG</option>
                                <option value="XXG">XXG</option>
                                <option value="√önico">√önico</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="itemQuantity">Quantidade*</label>
                            <input type="number" id="itemQuantity" min="0" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="itemMinQuantity">Estoque M√≠nimo*</label>
                            <input type="number" id="itemMinQuantity" min="0" required>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="itemPurchasePrice">Pre√ßo de Compra (R$)*</label>
                            <input type="number" id="itemPurchasePrice" min="0" step="0.01" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="itemSalePrice">Pre√ßo de Venda (R$)*</label>
                            <input type="number" id="itemSalePrice" min="0" step="0.01" required>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="itemPhoto">Foto do Produto</label>
                        <input type="file" id="itemPhoto" accept="image/*" onchange="handleFileUpload(event)">
                        <div id="photoPreview" class="photo-preview"></div>
                    </div>
                    
                    <div class="form-buttons">
                        <button type="submit" class="btn-primary">Salvar Item</button>
                        <button type="reset" class="btn-secondary">Limpar</button>
                    </div>
                </form>
            </div>
            
            <!-- Vendas -->
            <div id="sales" class="tab-content">
                <div class="section-header">
                    <h2>Registro de Vendas</h2>
                </div>
                
                <div class="sales-container">
                    <div class="sales-product-panel">
                        <div class="form-group">
                            <label for="productCodeSearch">Insira o c√≥digo do produto</label>
                            <div class="search-input">
                                <input type="text" id="productCodeSearch" placeholder="C√≥digo do produto">
                                <button id="searchProductBtn" class="search-btn">üîç</button>
                            </div>
                        </div>
                        
                        <div id="productSummary" class="product-summary" style="display: none;">
                            <div class="summary-row">
                                <div class="summary-item">
                                    <span class="summary-label">C√≥digo:</span>
                                    <span class="summary-value" id="summaryCode"></span>
                                </div>
                                <div class="summary-item">
                                    <span class="summary-label">Pre√ßo:</span>
                                    <span class="summary-value">R$ <span id="summaryPrice"></span></span>
                                </div>
                                <div class="summary-item">
                                    <span class="summary-label">Estoque:</span>
                                    <span class="summary-value" id="summaryStock"></span>
                                </div>
                            </div>
                            <div class="summary-row">
                                <span class="summary-label">Nome:</span>
                                <span class="summary-value" id="summaryName"></span>
                            </div>
                            <div class="product-actions">
                                <div class="quantity-control">
                                    <label for="productQuantity">Quantidade:</label>
                                    <input type="number" id="productQuantity" min="1" value="1">
                                </div>
                                <button id="addToCartBtn" class="btn-primary">Adicionar ao Carrinho</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="cart-panel">
                        <h3>Carrinho de Compras</h3>
                        <div id="cartItems" class="cart-items">
                            <div class="empty-cart">Carrinho vazio</div>
                        </div>
                        <div class="cart-summary">
                            <div class="cart-total">
                                <span>Total:</span>
                                <span id="cartTotal">R$ 0.00</span>
                            </div>
                            <div class="payment-selection">
                                <div class="form-group">
                                    <label for="paymentMethod">Forma de Pagamento:</label>
                                    <select id="paymentMethod">
                                        <option value="credit">Cart√£o de Cr√©dito</option>
                                        <option value="debit">Cart√£o de D√©bito</option>
                                        <option value="cash">Dinheiro</option>
                                        <option value="pix">PIX</option>
                                    </select>
                                </div>
                                <div id="creditInstallments" class="form-group">
                                    <label for="installments">Parcelas:</label>
                                    <select id="installments">
                                        <option value="1">1x</option>
                                        <option value="2">2x</option>
                                        <option value="3">3x</option>
                                        <option value="4">4x</option>
                                        <option value="5">5x</option>
                                        <option value="6">6x</option>
                                        <option value="7">7x</option>
                                        <option value="8">8x</option>
                                        <option value="9">9x</option>
                                        <option value="10">10x</option>
                                        <option value="11">11x</option>
                                        <option value="12">12x</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="cart-actions">
                            <button id="clearCartBtn" class="btn-secondary">Limpar Carrinho</button>
                            <button id="checkoutBtn" class="btn-primary" disabled>Finalizar Venda</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Fornecedores -->
            <div id="suppliers" class="tab-content">
                <div class="section-header">
                    <h2>Fornecedores</h2>
                    <div class="supplier-buttons">
                        <button id="addSupplierBtn" class="btn-primary">Adicionar Fornecedor</button>
                        <button id="editSupplierBtn" class="btn-secondary" disabled>Editar</button>
                        <button id="removeSupplierBtn" class="btn-danger" disabled>Remover</button>
                    </div>
                </div>
                
                <div class="table-container">
                    <table id="suppliersTable" class="data-table">
                        <thead>
                            <tr>
                                <th>Nome / Raz√£o Social</th>
                                <th>CNPJ</th>
                                <th>Telefones</th>
                                <th>Categorias</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Dados de fornecedores ser√£o inseridos aqui -->
                        </tbody>
                    </table>
                </div>
                
                <form id="supplierForm" style="display: none;">
                    <input type="hidden" id="supplierId">
                    <div class="form-group">
                        <label for="supplierName">Nome / Raz√£o Social*</label>
                        <input type="text" id="supplierName" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="supplierDocument">CNPJ*</label>
                        <div class="input-with-button">
                            <input type="text" id="supplierDocument" required>
                            <button type="button" id="searchCNPJBtn" class="btn-secondary">Buscar CNPJ</button>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="supplierCEP">CEP</label>
                            <div class="input-with-button">
                                <input type="text" id="supplierCEP" maxlength="9">
                                <button type="button" id="searchCEPBtn" class="btn-secondary">Buscar CEP</button>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="supplierStreet">Rua</label>
                            <input type="text" id="supplierStreet">
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="supplierNumber">N√∫mero</label>
                            <input type="text" id="supplierNumber">
                        </div>
                        
                        <div class="form-group">
                            <label for="supplierNeighborhood">Bairro</label>
                            <input type="text" id="supplierNeighborhood">
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="supplierCity">Cidade</label>
                            <input type="text" id="supplierCity">
                        </div>
                        
                        <div class="form-group">
                            <label for="supplierState">Estado</label>
                            <input type="text" id="supplierState" maxlength="2">
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="supplierWebsite">Website</label>
                            <input type="url" id="supplierWebsite">
                        </div>
                        
                        <div class="form-group">
                            <label for="supplierSocial">Redes Sociais</label>
                            <input type="text" id="supplierSocial">
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Telefones:</label>
                        <div id="supplierPhones">
                            <!-- Telefones ser√£o adicionados aqui -->
                        </div>
                        <button type="button" onclick="addPhone()" class="btn-secondary">Adicionar Telefone</button>
                    </div>
                    
                    <div class="form-group">
                        <label>Emails:</label>
                        <div id="supplierEmails">
                            <!-- Emails ser√£o adicionados aqui -->
                        </div>
                        <button type="button" onclick="addEmail()" class="btn-secondary">Adicionar Email</button>
                    </div>
                    
                    <!-- Campo de observa√ß√µes -->
                    <div class="form-group">
                        <label for="supplierNotes">Observa√ß√µes:</label>
                        <textarea id="supplierNotes" rows="3"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label>Categorias:</label>
                        <div id="supplierCategories" class="categories-grid">
                            <!-- Categorias ser√£o adicionadas aqui -->
                        </div>
                    </div>
                    
                    <div class="form-buttons">
                        <button type="submit" class="btn-primary">Salvar</button>
                        <button type="button" id="cancelSupplierBtn" class="btn-secondary">Cancelar</button>
                    </div>
                </form>
            </div>
            
            <!-- Relat√≥rios -->
            <div id="reports" class="tab-content">
                <div class="section-header">
                    <h2>Relat√≥rios e An√°lises</h2>
                </div>
                
                <div class="cards-container">
                    <div class="card">
                        <div class="card-title">Valor Total em Estoque</div>
                        <div class="card-value" id="totalInventoryValue">R$ 0.00</div>
                    </div>
                    <div class="card">
                        <div class="card-title">Total em Vendas</div>
                        <div class="card-value" id="totalSalesValue">R$ 0.00</div>
                    </div>
                    <div class="card">
                        <div class="card-title">Valor M√©dio por Venda</div>
                        <div class="card-value" id="averageSaleValue">R$ 0.00</div>
                    </div>
                    <div class="card">
                        <div class="card-title">Itens em Estoque Baixo</div>
                        <div class="card-value" id="lowStockCount">0</div>
                    </div>
                </div>
                
                <div class="chart-container">
                    <div class="chart-section">
                        <h3>Vendas por Dia (√öltimo M√™s)</h3>
                        <canvas id="salesChart"></canvas>
                    </div>
                    <div class="chart-section">
                        <h3>Estoque por Categoria</h3>
                        <canvas id="stockChart"></canvas>
                    </div>
                </div>
                
                <div class="report-section">
                    <h3>Produtos Mais Vendidos</h3>
                    <table id="topProductsTable" class="data-table">
                        <thead>
                            <tr>
                                <th>C√≥digo</th>
                                <th>Nome</th>
                                <th>Quantidade Vendida</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Dados ser√£o inseridos aqui -->
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Configura√ß√µes -->
            <div id="settings" class="tab-content">
                <div class="section-header">
                    <h2>Configura√ß√µes do Sistema</h2>
                </div>
                
                <div class="settings-section">
                    <h3>Apar√™ncia</h3>
                    <div class="form-group">
                        <label>Tema</label>
                        <div class="theme-selector">
                            <button onclick="setTheme('light')" class="theme-option light-theme">Claro</button>
                            <button onclick="setTheme('dark')" class="theme-option dark-theme">Escuro</button>
                        </div>
                    </div>
                </div>
                
                <div class="settings-section">
                    <h3>Gerenciamento de Categorias</h3>
                    <button class="btn-primary" onclick="openCategoriesModal()">Gerenciar Categorias</button>
                </div>
                
                <div class="settings-section">
                    <h3>Exporta√ß√£o de Dados</h3>
                    <button class="btn-primary" onclick="exportToExcel()">Exportar Estoque (Excel)</button>
                    <button class="btn-primary" onclick="exportToPDF()">Exportar Estoque (PDF)</button>
                </div>
                
                <div class="settings-section">
                    <h3>Sobre o Sistema</h3>
                    <p>Sistema de Controle de Estoque v1.0</p>
                    <p>Desenvolvido para gerenciar estoque, vendas e fornecedores.</p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal de Categorias -->
    <div id="categoriesModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2>Gerenciar Categorias</h2>
            <div class="add-category-form">
                <input type="text" id="newCategoryName" placeholder="Nova categoria">
                <button id="addCategoryBtn" class="btn-primary">Adicionar</button>
            </div>
            <div id="categoriesList" class="categories-list">
                <!-- Categorias ser√£o inseridas aqui pelo JavaScript -->
            </div>
            <div class="modal-footer">
                <button id="saveCategoriesBtn" class="btn-primary">Salvar</button>
                <button id="cancelCategoriesBtn" class="btn-secondary">Cancelar</button>
            </div>
        </div>
    </div>
    
    <!-- Modal de detalhes do fornecedor -->
    <div id="supplierDetailsModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2>Detalhes do Fornecedor</h2>
            <div id="supplierDetails">
                <!-- Detalhes do fornecedor ser√£o inseridos aqui -->
            </div>
            <div class="modal-footer">
                <button id="closeSupplierDetailsBtn" class="btn-primary">Fechar</button>
            </div>
        </div>
    </div>
    
    <script src="script.js"></script>
    <script>
        // Registrar Service Worker para PWA
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('sw.js')
                .then(function(registration) {
                    console.log('Service Worker registrado com sucesso:', registration);
                })
                .catch(function(error) {
                    console.log('Falha ao registrar o Service Worker:', error);
                });
        }
    </script>
</body>
</html>

css

:root {
    /* Vari√°veis para tema claro */
    --primary-color: #3498db;
    --secondary-color: #2ecc71;
    --danger-color: #e74c3c;
    --background-color: #f5f5f5;
    --card-bg-color: #ffffff;
    --text-color: #333333;
    --border-color: #dddddd;
    --sidebar-bg: #2c3e50;
    --sidebar-text: #ecf0f1;
    --sidebar-hover: #34495e;
    --header-bg: #ffffff;
    --input-background: #ffffff;
    --table-header-bg: #f0f0f0;
    --table-stripe: #f9f9f9;
    --table-hover: #ecf0f1;
    --shadow-color: rgba(0, 0, 0, 0.1);
}

/* Tema escuro */
[data-theme="dark"] {
    --primary-color: #3498db;
    --secondary-color: #2ecc71;
    --danger-color: #e74c3c;
    --background-color: #1a1a1a;
    --card-bg-color: #2c2c2c;
    --text-color: #f5f5f5;
    --border-color: #444444;
    --sidebar-bg: #1e1e1e;
    --sidebar-text: #f5f5f5;
    --sidebar-hover: #333333;
    --header-bg: #2c2c2c;
    --input-background: #2c3e50;
    --table-header-bg: #333333;
    --table-stripe: #2a2a2a;
    --table-hover: #383838;
    --shadow-color: rgba(0, 0, 0, 0.3);
}

/* Estilos gerais */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: var(--background-color);
    color: var(--text-color);
    line-height: 1.6;
}

.app-container {
    display: flex;
    min-height: 100vh;
}

/* Sidebar styles */
.sidebar {
    width: 60px;
    background-color: var(--sidebar-bg);
    color: var(--sidebar-text);
    transition: width 0.3s;
    overflow: hidden;
    position: relative;
    z-index: 10;
}

.sidebar.expanded {
    width: 220px;
}

.logo-container {
    padding: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.logo {
    width: 30px;
    height: 30px;
}

.app-name {
    margin-left: 15px;
    font-weight: bold;
    display: none;
}

.sidebar.expanded .app-name {
    display: block;
}

.toggle-btn {
    display: block;
    background: none;
    border: none;
    color: var(--sidebar-text);
    cursor: pointer;
    width: 100%;
    text-align: center;
    padding: 10px 0;
    font-size: 1.2rem;
}

.sidebar-menu {
    list-style: none;
    padding: 0;
    margin-top: 20px;
}

.sidebar-menu li {
    padding: 10px 15px;
    display: flex;
    align-items: center;
    cursor: pointer;
    position: relative;
}

.sidebar-menu li:hover {
    background-color: var(--sidebar-hover);
}

.sidebar-menu li.active {
    background-color: var(--primary-color);
}

.menu-icon {
    width: 30px;
    text-align: center;
    font-size: 20px;
}

.sidebar-menu li span {
    margin-left: 10px;
    display: none;
}

.sidebar.expanded .sidebar-menu li span {
    display: block;
}

.badge {
    display: none;
    position: absolute;
    top: 5px;
    right: 10px;
    background-color: var(--danger-color);
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    text-align: center;
    line-height: 20px;
    font-size: 12px;
}

.sidebar.expanded .badge {
    display: block;
}

.sidebar-footer {
    position: absolute;
    bottom: 0;
    width: 100%;
    padding: 15px;
    display: flex;
    justify-content: center;
}

.theme-toggle {
    background: none;
    border: none;
    color: var(--sidebar-text);
    cursor: pointer;
    font-size: 1.2rem;
}

/* Main content styles */
.main-content {
    flex: 1;
    overflow-x: hidden;
}

header {
    background-color: var(--header-bg);
    padding: 15px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 5px var(--shadow-color);
    position: sticky;
    top: 0;
    z-index: 5;
}

header h1 {
    font-size: 1.5rem;
    color: var(--text-color);
}

.user-info {
    display: flex;
    align-items: center;
}

.user-info span {
    margin-right: 10px;
}

/* Tab content styles */
.tab-content {
    display: none;
    padding: 20px;
}

.tab-content.active {
    display: block;
}

/* Card styles */
.cards-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.card {
    background-color: var(--card-bg-color);
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 4px 6px var(--shadow-color);
}

.card-title {
    font-size: 1rem;
    margin-bottom: 10px;
    color: var(--text-color);
}

.card-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--primary-color);
}

/* Table styles */
.table-container {
    overflow-x: auto;
    margin-bottom: 30px;
}

.data-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

.data-table th, .data-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
}

.data-table th {
    background-color: var(--table-header-bg);
    font-weight: bold;
}

.data-table tbody tr:nth-child(even) {
    background-color: var(--table-stripe);
}

.data-table tbody tr:hover {
    background-color: var(--table-hover);
}

.stock-low {
    background-color: rgba(231, 76, 60, 0.2) !important;
}

.thumbnail {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: 4px;
    cursor: pointer;
}

/* Button styles */
.btn-primary, .btn-secondary, .btn-danger, .btn-sm {
    padding: 8px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.2s;
}

.btn-primary {
    background-color: var(--primary-color);
    color: white;
}

.btn-secondary {
    background-color: var(--secondary-color);
    color: white;
}

.btn-danger {
    background-color: var(--danger-color);
    color: white;
}

.btn-sm {
    padding: 5px 10px;
    font-size: 0.8rem;
}

.btn-primary:hover {
    background-color: #2980b9;
}

.btn-secondary:hover {
    background-color: #27ae60;
}

.btn-danger:hover {
    background-color: #c0392b;
}

.btn-primary:disabled, .btn-secondary:disabled, .btn-danger:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Form styles */
.form-group {
    margin-bottom: 15px;
}

.form-row {
    display: flex;
    gap: 15px;
    flex-wrap: wrap;
    margin-bottom: 15px;
}

.form-row .form-group {
    flex: 1;
    min-width: 200px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
}

input, select, textarea {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background-color: var(--input-background);
    color: var(--text-color);
}

input:focus, select:focus, textarea:focus {
    outline: none;
    border-color: var(--primary-color);
}

.form-buttons {
    display: flex;
    gap: 10px;
    margin-top: 20px;
}

/* Section header styles */
.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.section-header h2 {
    font-size: 1.5rem;
}

.section-divider {
    height: 1px;
    background-color: var(--border-color);
    margin: 30px 0;
}

/* Filters styles */
.filters {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
}

.summary-bar {
    display: flex;
    justify-content: space-between;
    background-color: var(--card-bg-color);
    padding: 10px 15px;
    border-radius: 8px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px var(--shadow-color);
}

.summary-item {
    display: flex;
    flex-direction: column;
}

.summary-label {
    font-size: 0.9rem;
    color: var(--text-color);
}

.summary-value {
    font-size: 1.1rem;
    font-weight: bold;
    color: var(--primary-color);
}

/* Modal styles */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 100;
    overflow: auto;
}

.modal-content {
    position: relative;
    background-color: var(--card-bg-color);
    margin: 5% auto;
    padding: 20px;
    width: 80%;
    max-width: 800px;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.close-modal {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 1.5rem;
    cursor: pointer;
}

.modal-footer {
    margin-top: 20px;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}

/* Categories modal */
.add-category-form {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.categories-list {
    max-height: 300px;
    overflow-y: auto;
}

.category-item {
    display: flex;
    gap: 10px;
    margin-bottom: 10px;
}

/* Photo related */
.photo-preview {
    margin-top: 10px;
    max-width: 200px;
}

.photo-modal {
    display: flex;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    z-index: 100;
    justify-content: center;
    align-items: center;
}

.photo-modal-content {
    position: relative;
    max-width: 80%;
    max-height: 80%;
}

.photo-modal-content img {
    max-width: 100%;
    max-height: 80vh;
    display: block;
}

/* Sales section styles */
.sales-container {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
}

.sales-product-panel, .cart-panel {
    flex: 1;
    min-width: 300px;
    background-color: var(--card-bg-color);
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px var(--shadow-color);
}

.search-input {
    display: flex;
    gap: 10px;
}

.search-btn {
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    padding: 0 15px;
}

.product-summary {
    margin-top: 20px;
    padding: 15px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
}

.product-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 15px;
}

.quantity-control {
    display: flex;
    align-items: center;
    gap: 10px;
}

.cart-items {
    max-height: 400px;
    overflow-y: auto;
    margin: 15px 0;
}

.cart-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    border-bottom: 1px solid var(--border-color);
}

.cart-item-info {
    flex: 2;
}

.cart-item-name {
    font-weight: bold;
}

.cart-item-details {
    font-size: 0.9rem;
    color: var(--text-color);
    opacity: 0.8;
}

.cart-item-quantity {
    display: flex;
    align-items: center;
    gap: 5px;
}

.cart-item-price, .cart-item-total {
    font-weight: 500;
}

.empty-cart {
    text-align: center;
    padding: 20px;
    color: var(--text-color);
    opacity: 0.7;
}

.cart-summary {
    padding: 15px 0;
    border-top: 1px solid var(--border-color);
}

.cart-total {
    display: flex;
    justify-content: space-between;
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 15px;
}

.payment-selection {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
}

.cart-actions {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
}

/* Chart styles */
.chart-container {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 30px;
}

.chart-section {
    flex: 1;
    min-width: 300px;
    background-color: var(--card-bg-color);
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px var(--shadow-color);
}

.chart-section h3 {
    margin-bottom: 15px;
}

/* Settings styles */
.settings-section {
    background-color: var(--card-bg-color);
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px var(--shadow-color);
}

.theme-selector {
    display: flex;
    gap: 15px;
    margin-top: 10px;
}

.theme-option {
    padding: 10px 15px;
    border-radius: 4px;
    cursor: pointer;
    border: 2px solid transparent;
}

.light-theme {
    background-color: #f5f5f5;
    color: #333;
}

.dark-theme {
    background-color: #333;
    color: #f5f5f5;
}

/* Supplier details modal */
.details-section {
    margin-bottom: 20px;
}

.details-section h3 {
    margin-bottom: 10px;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 5px;
}

.details-row {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
    margin-bottom: 20px;
}

.details-column {
    flex: 1;
    min-width: 250px;
}

/* Responsiveness for mobile */
@media (max-width: 600px) {
    .sidebar {
        width: 50px;
    }
    
    .sidebar.expanded {
        width: 180px;
    }
    
    .menu-icon {
        font-size: 16px;
    }
    
    header {
        padding: 10px 15px;
    }
    
    header h1 {
        font-size: 1.2rem;
    }
    
    .tab-content {
        padding: 10px;
    }
    
    .modal-content {
        width: 95%;
        margin: 5% auto;
    }
    
    .summary-bar {
        flex-direction: column;
        gap: 10px;
    }
}

/* New styles for supplier features */
.supplier-buttons {
    display: flex;
    gap: 10px;
}

#supplierForm {
    background-color: var(--card-bg-color);
    border-radius: 8px;
    padding: 20px;
    margin-top: 20px;
    box-shadow: 0 2px 4px var(--shadow-color);
}

.input-with-button {
    display: flex;
    gap: 10px;
}

tr.selected {
    background-color: rgba(52, 152, 219, 0.2) !important;
}

.phone-row, .email-row {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
    gap: 10px;
}

.phone-number {
    flex: 2;
}

.phone-type {
    flex: 1;
}

.whatsapp-checkbox {
    display: flex;
    align-items: center;
    white-space: nowrap;
    margin: 0 5px;
}

.whatsapp-checkbox input {
    margin-right: 5px;
    width: auto;
}

/* Estilos para a grade de categorias */
.categories-grid {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    gap: 10px;
    margin-top: 10px;
}

@media (max-width: 1600px) {
    .categories-grid {
        grid-template-columns: repeat(6, 1fr);
    }
}

@media (max-width: 1200px) {
    .categories-grid {
        grid-template-columns: repeat(4, 1fr);
    }
}

@media (max-width: 768px) {
    .categories-grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

.category-checkbox {
    display: flex;
    align-items: center;
    padding: 5px;
}

.category-checkbox input[type="checkbox"] {
    margin-right: 5px;
    width: auto;
}

/* Estilo para o campo de observa√ß√µes */
#supplierNotes {
    width: 100%;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid var(--border-color);
    background-color: var(--input-background);
    color: var(--text-color);
    resize: vertical;
}

javascript

// 1. Vari√°veis globais
let lastSaleId = Math.max(0, ...(JSON.parse(localStorage.getItem('sales') || []).map(sale => sale.id))) || 0;
const currentUser = "Usu√°rio Padr√£o";
let inventory = JSON.parse(localStorage.getItem('inventory')) || [];
let sales = JSON.parse(localStorage.getItem('sales')) || [];
let suppliers = JSON.parse(localStorage.getItem('suppliers')) || [];
let categories = JSON.parse(localStorage.getItem('categories')) || [
    "Acess√≥rios", "Action Figures", "Bolsas", "Garrafas", 
    "Lumin√°rias", "Quadros", "Roupas", "Utilidades"
];
let cart = [];
let chart = null;
let currentTheme = localStorage.getItem('theme') || 'light';
let editingItemId = null;
let editingSupplierId = null;
let selectedPaymentMethod = 'credit';
let selectedInstallments = 1;
let currentSearchedProduct = null;

// 2. Inicializa√ß√£o do jsPDF
const { jsPDF } = window.jspdf;

// 3. Fun√ß√£o para alternar entre abas
function switchTab(tabId) {
    // Remover classe active de todas as abas
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // Remover classe active de todos os itens do menu
    document.querySelectorAll('.sidebar-menu li').forEach(item => {
        item.classList.remove('active');
    });
    
    // Ativar a aba selecionada
    const tabContent = document.getElementById(tabId);
    if (tabContent) {
        tabContent.classList.add('active');
    }
    
    // Ativar o item de menu correspondente
    const menuItem = document.querySelector(`.sidebar-menu li[data-tab="${tabId}"]`);
    if (menuItem) {
        menuItem.classList.add('active');
    }
    
    // Atualizar t√≠tulo da p√°gina
    const currentTabTitle = document.getElementById('currentTabTitle');
    if (currentTabTitle && menuItem) {
        currentTabTitle.textContent = menuItem.querySelector('span').textContent;
    }
    
    if (tabId === 'sales') {
        updateCart();
        // Inicializa as op√ß√µes de pagamento
        toggleInstallments();
    } else if (tabId === 'reports') {
        generateReport();
    } else if (tabId === 'suppliers') {
        loadSuppliers();
    }
}

// 4. Fun√ß√µes de tema
function applyTheme() {
    document.body.setAttribute('data-theme', currentTheme);
    localStorage.setItem('theme', currentTheme);
    const themeToggle = document.getElementById('themeToggle');
    if (themeToggle) {
        themeToggle.textContent = currentTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
    }
}

function toggleTheme() {
    currentTheme = currentTheme === 'light' ? 'dark' : 'light';
    applyTheme();
}

function setTheme(theme) {
    currentTheme = theme;
    applyTheme();
}

// 5. Fun√ß√µes de categorias
function loadCategories() {
    const itemCategory = document.getElementById('itemCategory');
    const filterCategory = document.getElementById('filterCategory');
    
    if (itemCategory) {
        itemCategory.innerHTML = '<option value="">Selecione...</option>' + 
            categories.map(cat => `<option value="${cat}">${cat}</option>`).join('');
    }
    
    if (filterCategory) {
        filterCategory.innerHTML = '<option value="">Todas</option>' + 
            categories.map(cat => `<option value="${cat}">${cat}</option>`).join('');
    }
}

function openCategoriesModal() {
    const modal = document.getElementById('categoriesModal');
    const categoriesList = document.getElementById('categoriesList');
    
    if (!modal || !categoriesList) return;
    
    categoriesList.innerHTML = categories.map((cat, index) => `
        <div class="category-item">
            <input type="text" value="${cat}" data-index="${index}" class="category-input">
            <button type="button" class="btn-danger remove-category" data-index="${index}">Remover</button>
        </div>
    `).join('');
    
    modal.style.display = 'block';
    
    // Garantir que o bot√£o de fechar o modal funciona
    const closeModalBtn = document.querySelector('#categoriesModal .close-modal');
    if (closeModalBtn) {
        closeModalBtn.onclick = function() {
            closeCategoriesModal();
        };
    }
    
    // Adicionar clique fora do modal para fechar
    window.onclick = function(event) {
        if (event.target === modal) {
            closeCategoriesModal();
        }
    };
}

function closeCategoriesModal() {
    const modal = document.getElementById('categoriesModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

function cancelCategoriesModal() {
    closeCategoriesModal();
}

function saveCategories() {
    const inputs = document.querySelectorAll('.category-input');
    categories = Array.from(inputs).map(input => input.value.trim()).filter(cat => cat);
    localStorage.setItem('categories', JSON.stringify(categories));
    loadCategories();
    closeCategoriesModal();
}

function addCategory() {
    const newCategoryName = document.getElementById('newCategoryName').value.trim();
    if (!newCategoryName) return;
    
    const categoriesList = document.getElementById('categoriesList');
    const index = categories.length;
    
    if (categoriesList) {
        categories.push(newCategoryName);
        categoriesList.innerHTML += `
            <div class="category-item">
                <input type="text" value="${newCategoryName}" data-index="${index}" class="category-input">
                <button class="btn-danger remove-category" data-index="${index}">Remover</button>
            </div>
        `;
        
        document.getElementById('newCategoryName').value = '';
    }
}

function removeCategory(index) {
    categories.splice(index, 1);
    const categoriesList = document.getElementById('categoriesList');
    if (categoriesList) {
        categoriesList.innerHTML = categories.map((cat, i) => `
            <div class="category-item">
                <input type="text" value="${cat}" data-index="${i}" class="category-input">
                <button class="btn-danger remove-category" data-index="${i}">Remover</button>
            </div>
        `).join('');
    }
}

// 6. Fun√ß√µes para formata√ß√£o de CEP e telefone
function formatCEP(input) {
    // Remove tudo que n√£o √© n√∫mero
    let value = input.value.replace(/\D/g, '');
    
    // Limita a 8 d√≠gitos
    if (value.length > 8) {
        value = value.substring(0, 8);
    }
    
    // Adiciona o h√≠fen ap√≥s os primeiros 5 d√≠gitos
    if (value.length > 5) {
        value = value.substring(0, 5) + '-' + value.substring(5);
    }
    
    // Atualiza o campo
    input.value = value;
}

function formatPhone(input) {
    // Remove tudo que n√£o √© n√∫mero
    let value = input.value.replace(/\D/g, '');
    
    // Limita a 11 d√≠gitos (DDD + 9 d√≠gitos)
    if (value.length > 11) {
        value = value.substring(0, 11);
    }
    
    // Formata o telefone de acordo com a quantidade de d√≠gitos
    if (value.length <= 2) {
        // Apenas DDD
        value = value;
    } else if (value.length <= 7) {
        // DDD e parte do n√∫mero
        value = '(' + value.substring(0, 2) + ')-' + value.substring(2);
    } else {
        // N√∫mero completo
        value = '(' + value.substring(0, 2) + ')-' + value.substring(2, 7) + '-' + value.substring(7);
    }
    
    // Atualiza o campo
    input.value = value;
}

// 7. Fun√ß√µes de fornecedores
function loadSuppliers() {
    const tableBody = document.getElementById('suppliersTable')?.querySelector('tbody');
    const itemSupplier = document.getElementById('itemSupplier');
    const filterSupplier = document.getElementById('filterSupplier');
    
    if (tableBody) {
        tableBody.innerHTML = suppliers.map(supplier => {
            // Formatar os telefones para exibi√ß√£o na tabela
            const formattedPhones = supplier.phones.map(phone => {
                let formatted = phone.number;
                // Se o n√∫mero tiver pelo menos 8 d√≠gitos, formatamos
                if (phone.number.length >= 8) {
                    const digits = phone.number.replace(/\D/g, '');
                    if (digits.length > 7) {
                        formatted = `(${digits.substring(0, 2)})-${digits.substring(2, 7)}-${digits.substring(7)}`;
                    } else if (digits.length > 2) {
                        formatted = `(${digits.substring(0, 2)})-${digits.substring(2)}`;
                    }
                }
                return `${formatted} ${phone.isWhatsapp ? 'üì±' : ''}`;
            }).join(', ');
            
            return `
                <tr data-id="${supplier.id}" onclick="selectSupplier('${supplier.id}')" 
                    class="${editingSupplierId === supplier.id ? 'selected' : ''}">
                    <td>${supplier.name}</td>
                    <td>${supplier.document}</td>
                    <td>${formattedPhones}</td>
                    <td>${supplier.categories.join(', ')}</td>
                </tr>
            `;
        }).join('');
        
        // Adicionar evento de duplo clique para mostrar detalhes
        tableBody.querySelectorAll('tr').forEach(row => {
            row.addEventListener('dblclick', function() {
                const id = this.getAttribute('data-id');
                if (id) {
                    showSupplierDetails(id);
                }
            });
        });
    }
    
    if (itemSupplier) {
        itemSupplier.innerHTML = '<option value="">Selecione...</option>' + 
            suppliers.map(sup => `<option value="${sup.name}">${sup.name}</option>`).join('');
    }
    
    if (filterSupplier) {
        filterSupplier.innerHTML = '<option value="">Todos</option>' + 
            suppliers.map(sup => `<option value="${sup.name}">${sup.name}</option>`).join('');
    }
}

function showSupplierDetails(id) {
    const supplier = suppliers.find(s => s.id === id);
    if (!supplier) return;
    
    const modal = document.getElementById('supplierDetailsModal');
    const detailsContainer = document.getElementById('supplierDetails');
    
    if (!modal || !detailsContainer) return;
    
    // Formatar telefones para exibi√ß√£o
    const formattedPhones = supplier.phones.map(phone => {
        let formatted = phone.number;
        // Se o n√∫mero tiver pelo menos 8 d√≠gitos, formatamos
        if (phone.number.length >= 8) {
            const digits = phone.number.replace(/\D/g, '');
            if (digits.length > 7) {
                formatted = `(${digits.substring(0, 2)})-${digits.substring(2, 7)}-${digits.substring(7)}`;
            } else if (digits.length > 2) {
                formatted = `(${digits.substring(0, 2)})-${digits.substring(2)}`;
            }
        }
        return `${formatted} ${phone.isWhatsapp ? '(WhatsApp)' : ''}`;
    }).join('<br>');
    
    // Formatar CEP
    const cep = supplier.address?.cep || '';
    let formattedCep = cep.replace(/\D/g, '');
    if (formattedCep.length > 5) {
        formattedCep = formattedCep.substring(0, 5) + '-' + formattedCep.substring(5);
    }
    
    // Montar o conte√∫do HTML
    detailsContainer.innerHTML = `
        <div class="details-section">
            <h3>Informa√ß√µes B√°sicas</h3>
            <p><strong>Nome / Raz√£o Social:</strong> ${supplier.name}</p>
            <p><strong>CNPJ:</strong> ${supplier.document}</p>
            <p><strong>Website:</strong> ${supplier.website || 'N√£o informado'}</p>
            <p><strong>Redes Sociais:</strong> ${supplier.social || 'N√£o informado'}</p>
        </div>
        
        <div class="details-section">
            <h3>Endere√ßo</h3>
            <p><strong>CEP:</strong> ${formattedCep || 'N√£o informado'}</p>
            <p><strong>Rua:</strong> ${supplier.address?.street || 'N√£o informado'}</p>
            <p><strong>N√∫mero:</strong> ${supplier.address?.number || 'N√£o informado'}</p>
            <p><strong>Bairro:</strong> ${supplier.address?.neighborhood || 'N√£o informado'}</p>
            <p><strong>Cidade:</strong> ${supplier.address?.city || 'N√£o informado'}</p>
            <p><strong>Estado:</strong> ${supplier.address?.state || 'N√£o informado'}</p>
        </div>
        
        <div class="details-row">
            <div class="details-column">
                <h3>Telefones</h3>
                <p>${formattedPhones || 'Nenhum telefone cadastrado'}</p>
            </div>
            
            <div class="details-column">
                <h3>E-mails</h3>
                <p>${supplier.emails?.join('<br>') || 'Nenhum e-mail cadastrado'}</p>
            </div>
        </div>
        
        <div class="details-section">
            <h3>Observa√ß√µes</h3>
            <p>${supplier.notes || 'Nenhuma observa√ß√£o cadastrada'}</p>
        </div>
        
        <div class="details-section">
            <h3>Categorias</h3>
            <p>${supplier.categories.join(', ') || 'Nenhuma categoria cadastrada'}</p>
        </div>
    `;
    
    // Exibir o modal
    modal.style.display = 'block';
    
    // Adicionar evento para fechar o modal
    const closeBtn = modal.querySelector('.close-modal');
    const closeDetailsBtn = document.getElementById('closeSupplierDetailsBtn');
    
    if (closeBtn) {
        closeBtn.onclick = function() {
            modal.style.display = 'none';
        };
    }
    
    if (closeDetailsBtn) {
        closeDetailsBtn.onclick = function() {
            modal.style.display = 'none';
        };
    }
    
    // Adicionar clique fora do modal para fechar
    window.onclick = function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    };
}

function selectSupplier(id) {
    editingSupplierId = id;
    const editSupplierBtn = document.getElementById('editSupplierBtn');
    const removeSupplierBtn = document.getElementById('removeSupplierBtn');
    
    if (editSupplierBtn) editSupplierBtn.disabled = false;
    if (removeSupplierBtn) removeSupplierBtn.disabled = false;
    
    document.querySelectorAll('#suppliersTable tbody tr').forEach(row => {
        row.classList.remove('selected');
    });
    
    const row = document.querySelector(`#suppliersTable tbody tr[data-id="${id}"]`);
    if (row) {
        row.classList.add('selected');
    }
}

function addSupplier() {
    editingSupplierId = null;
    const supplierForm = document.getElementById('supplierForm');
    const supplierPhones = document.getElementById('supplierPhones');
    const supplierEmails = document.getElementById('supplierEmails');
    const supplierCategories = document.getElementById('supplierCategories');
    
    if (supplierForm) supplierForm.style.display = 'block';
    if (supplierForm) supplierForm.reset();
    
    const supplierId = document.getElementById('supplierId');
    if (supplierId) supplierId.value = '';
    
    if (supplierPhones) {
        supplierPhones.innerHTML = `
            <div class="phone-row">
                <input type="text" class="phone-number" placeholder="(00)-00000-0000" maxlength="15" oninput="formatPhone(this)">
                <select class="phone-type">
                    <option value="cell">Celular</option>
                    <option value="landline">Fixo</option>
                </select>
                <label class="whatsapp-checkbox">
                    <input type="checkbox" class="whatsapp-check"> WhatsApp
                </label>
                <button type="button" class="btn-secondary remove-phone">Remover</button>
            </div>
        `;
    }
    
    if (supplierEmails) {
        supplierEmails.innerHTML = `
            <div class="email-row">
                <input type="email" class="supplier-email" placeholder="Email">
                <button type="button" class="btn-secondary remove-email">Remover</button>
            </div>
        `;
    }
    
    if (supplierCategories) {
        supplierCategories.innerHTML = categories.map(cat => `
            <label class="category-checkbox">
                <input type="checkbox" value="${cat}"> ${cat}
            </label>
        `).join('');
    }
    
    // Limpar campo de observa√ß√µes
    document.getElementById('supplierNotes').value = '';
    
    // Aplicar m√°scaras de formata√ß√£o
    const cepInput = document.getElementById('supplierCEP');
    if (cepInput) {
        cepInput.addEventListener('input', function() {
            formatCEP(this);
        });
    }
    
    // Adicionar eventos para os bot√µes
    addPhoneEvents();
    addEmailEvents();
}

function editSupplier() {
    if (!editingSupplierId) return;
    
    const supplier = suppliers.find(s => s.id === editingSupplierId);
    if (!supplier) return;
    
    const supplierForm = document.getElementById('supplierForm');
    if (supplierForm) supplierForm.style.display = 'block';
    
    const supplierId = document.getElementById('supplierId');
    const supplierName = document.getElementById('supplierName');
    const supplierDocument = document.getElementById('supplierDocument');
    const supplierCEP = document.getElementById('supplierCEP');
    const supplierStreet = document.getElementById('supplierStreet');
    const supplierNumber = document.getElementById('supplierNumber');
    const supplierNeighborhood = document.getElementById('supplierNeighborhood');
    const supplierCity = document.getElementById('supplierCity');
    const supplierState = document.getElementById('supplierState');
    const supplierWebsite = document.getElementById('supplierWebsite');
    const supplierSocial = document.getElementById('supplierSocial');
    const supplierNotes = document.getElementById('supplierNotes');
    
    if (supplierId) supplierId.value = supplier.id;
    if (supplierName) supplierName.value = supplier.name;
    if (supplierDocument) supplierDocument.value = supplier.document;
    
    // Formatar CEP
    if (supplierCEP) {
        const cep = supplier.address?.cep || '';
        let formattedCep = cep.replace(/\D/g, '');
        if (formattedCep.length > 5) {
            formattedCep = formattedCep.substring(0, 5) + '-' + formattedCep.substring(5);
        }
        supplierCEP.value = formattedCep;
    }
    
    if (supplierStreet) supplierStreet.value = supplier.address?.street || '';
    if (supplierNumber) supplierNumber.value = supplier.address?.number || '';
    if (supplierNeighborhood) supplierNeighborhood.value = supplier.address?.neighborhood || '';
    if (supplierCity) supplierCity.value = supplier.address?.city || '';
    if (supplierState) supplierState.value = supplier.address?.state || '';
    if (supplierWebsite) supplierWebsite.value = supplier.website || '';
    if (supplierSocial) supplierSocial.value = supplier.social || '';
    if (supplierNotes) supplierNotes.value = supplier.notes || '';
    
    // Formata√ß√£o dos telefones
    const phonesContainer = document.getElementById('supplierPhones');
    if (phonesContainer) {
        phonesContainer.innerHTML = supplier.phones.map(phone => {
            // Formatar o n√∫mero de telefone
            let number = phone.number.replace(/\D/g, '');
            let formattedNumber = '';
            
            if (number.length <= 2) {
                formattedNumber = number;
            } else if (number.length <= 7) {
                formattedNumber = '(' + number.substring(0, 2) + ')-' + number.substring(2);
            } else {
                formattedNumber = '(' + number.substring(0, 2) + ')-' + number.substring(2, 7) + '-' + number.substring(7);
            }
            
            return `
                <div class="phone-row">
                    <input type="text" class="phone-number" placeholder="(00)-00000-0000" 
                           value="${formattedNumber}" maxlength="15" oninput="formatPhone(this)">
                    <select class="phone-type">
                        <option value="cell" ${phone.type === 'cell' ? 'selected' : ''}>Celular</option>
                        <option value="landline" ${phone.type === 'landline' ? 'selected' : ''}>Fixo</option>
                    </select>
                    <label class="whatsapp-checkbox">
                        <input type="checkbox" class="whatsapp-check" ${phone.isWhatsapp ? 'checked' : ''}> WhatsApp
                    </label>
                    <button type="button" class="btn-secondary remove-phone">Remover</button>
                </div>
            `;
        }).join('');
    }
    
    const emailsContainer = document.getElementById('supplierEmails');
    if (emailsContainer) {
        emailsContainer.innerHTML = supplier.emails?.map(email => `
            <div class="email-row">
                <input type="email" class="supplier-email" placeholder="Email" value="${email}">
                <button type="button" class="btn-secondary remove-email">Remover</button>
            </div>
        `).join('') || `
            <div class="email-row">
                <input type="email" class="supplier-email" placeholder="Email">
                <button type="button" class="btn-secondary remove-email">Remover</button>
            </div>
        `;
    }
    
    const categoriesContainer = document.getElementById('supplierCategories');
    if (categoriesContainer) {
        categoriesContainer.innerHTML = categories.map(cat => `
            <label class="category-checkbox">
                <input type="checkbox" value="${cat}" ${supplier.categories.includes(cat) ? 'checked' : ''}> ${cat}
            </label>
        `).join('');
    }
    
    // Aplicar m√°scaras de formata√ß√£o
    const cepInput = document.getElementById('supplierCEP');
    if (cepInput) {
        cepInput.addEventListener('input', function() {
            formatCEP(this);
        });
    }
    
    // Adicionar eventos para os bot√µes
    addPhoneEvents();
    addEmailEvents();
}

function removeSupplier() {
    if (!editingSupplierId || !confirm('Tem certeza que deseja remover este fornecedor?')) return;
    
    suppliers = suppliers.filter(s => s.id !== editingSupplierId);
    saveData();
    loadSuppliers();
    
    const editSupplierBtn = document.getElementById('editSupplierBtn');
    const removeSupplierBtn = document.getElementById('removeSupplierBtn');
    
    if (editSupplierBtn) editSupplierBtn.disabled = true;
    if (removeSupplierBtn) removeSupplierBtn.disabled = true;
    
    editingSupplierId = null;
}

function saveSupplier(e) {
    e.preventDefault();
    
    const supplierId = document.getElementById('supplierId');
    const supplierName = document.getElementById('supplierName');
    const supplierDocument = document.getElementById('supplierDocument');
    const supplierCEP = document.getElementById('supplierCEP');
    const supplierStreet = document.getElementById('supplierStreet');
    const supplierNumber = document.getElementById('supplierNumber');
    const supplierNeighborhood = document.getElementById('supplierNeighborhood');
    const supplierCity = document.getElementById('supplierCity');
    const supplierState = document.getElementById('supplierState');
    const supplierWebsite = document.getElementById('supplierWebsite');
    const supplierSocial = document.getElementById('supplierSocial');
    const supplierNotes = document.getElementById('supplierNotes');
    
    if (!supplierName || !supplierDocument) {
        alert('Elementos do formul√°rio n√£o encontrados.');
        return;
    }
    
    const id = supplierId.value || Date.now().toString();
    const name = supplierName.value.trim();
    const documentValue = supplierDocument.value.trim();
    
    // Remover formata√ß√£o do CEP
    const cepValue = supplierCEP?.value || '';
    const cleanCep = cepValue.replace(/\D/g, '');
    
    const street = supplierStreet?.value.trim() || '';
    const number = supplierNumber?.value.trim() || '';
    const neighborhood = supplierNeighborhood?.value.trim() || '';
    const city = supplierCity?.value.trim() || '';
    const state = supplierState?.value.trim() || '';
    const website = supplierWebsite?.value.trim() || '';
    const social = supplierSocial?.value.trim() || '';
    const notes = supplierNotes?.value.trim() || '';
    
    if (!name || !documentValue) {
        alert('Preencha pelo menos o nome e documento do fornecedor!');
        return;
    }
    
    const phoneRows = document.querySelectorAll('.phone-row');
    const phones = Array.from(phoneRows).map(row => {
        // Remover formata√ß√£o do n√∫mero para salvar apenas os d√≠gitos
        const numberInput = row.querySelector('.phone-number');
        const number = numberInput.value.replace(/\D/g, '');
        
        return {
            number,
            type: row.querySelector('.phone-type').value,
            isWhatsapp: row.querySelector('.whatsapp-check').checked
        };
    }).filter(phone => phone.number);
    
    const emailRows = document.querySelectorAll('.email-row');
    const emails = Array.from(emailRows).map(row => 
        row.querySelector('.supplier-email').value.trim()
    ).filter(email => email);
    
    const categoryCheckboxes = document.querySelectorAll('#supplierCategories input[type="checkbox"]:checked');
    const supplierCategories = Array.from(categoryCheckboxes).map(cb => cb.value);
    
    const supplier = {
        id,
        name,
        document: documentValue,
        address: {
            street,
            number,
            neighborhood,
            city,
            state,
            cep: cleanCep
        },
        phones,
        emails,
        categories: supplierCategories,
        website,
        social,
        notes
    };
    
    const existingIndex = suppliers.findIndex(s => s.id === id);
    if (existingIndex >= 0) {
        suppliers[existingIndex] = supplier;
    } else {
        suppliers.push(supplier);
    }
    
    saveData();
    loadSuppliers();
    
    const supplierForm = document.getElementById('supplierForm');
    if (supplierForm) supplierForm.style.display = 'none';
    
    const editSupplierBtn = document.getElementById('editSupplierBtn');
    const removeSupplierBtn = document.getElementById('removeSupplierBtn');
    
    if (editSupplierBtn) editSupplierBtn.disabled = true;
    if (removeSupplierBtn) removeSupplierBtn.disabled = true;
    
    editingSupplierId = null;
}

// Fun√ß√µes para gerenciar telefones e emails dos fornecedores
function addPhone() {
    const container = document.getElementById('supplierPhones');
    if (container) {
        container.innerHTML += `
            <div class="phone-row">
                <input type="text" class="phone-number" placeholder="(00)-00000-0000" 
                       maxlength="15" oninput="formatPhone(this)">
                <select class="phone-type">
                    <option value="cell">Celular</option>
                    <option value="landline">Fixo</option>
                </select>
                <label class="whatsapp-checkbox">
                    <input type="checkbox" class="whatsapp-check"> WhatsApp
                </label>
                <button type="button" class="btn-secondary remove-phone">Remover</button>
            </div>
        `;
    
        // Adicionar eventos aos novos bot√µes
        addPhoneEvents();
    }
}

function addEmail() {
    const container = document.getElementById('supplierEmails');
    if (container) {
        container.innerHTML += `
            <div class="email-row">
                <input type="email" class="supplier-email" placeholder="Email">
                <button type="button" class="btn-secondary remove-email">Remover</button>
            </div>
        `;
    
        // Adicionar eventos aos novos bot√µes
        addEmailEvents();
    }
}

function addPhoneEvents() {
    document.querySelectorAll('.remove-phone').forEach(button => {
        button.addEventListener('click', function() {
            if (document.querySelectorAll('.phone-row').length > 1) {
                this.closest('.phone-row').remove();
            } else {
                alert('Mantenha pelo menos um telefone.');
            }
        });
    });
}

function addEmailEvents() {
    document.querySelectorAll('.remove-email').forEach(button => {
        button.addEventListener('click', function() {
            if (document.querySelectorAll('.email-row').length > 1) {
                this.closest('.email-row').remove();
            } else {
                alert('Mantenha pelo menos um email.');
            }
        });
    });
}

// Fun√ß√µes para buscar CEP e CNPJ
function searchCEP() {
    const cep = document.getElementById('supplierCEP')?.value.replace(/\D/g, '');
    
    if (!cep || cep.length !== 8) {
        alert('CEP inv√°lido!');
        return;
    }
    
    fetch(`https://viacep.com.br/ws/${cep}/json/`)
        .then(response => response.json())
        .then(data => {
            if (data.erro) {
                alert('CEP n√£o encontrado!');
                return;
            }
            
            const supplierStreet = document.getElementById('supplierStreet');
            const supplierNeighborhood = document.getElementById('supplierNeighborhood');
            const supplierCity = document.getElementById('supplierCity');
            const supplierState = document.getElementById('supplierState');
            const supplierNumber = document.getElementById('supplierNumber');
            
            if (supplierStreet) supplierStreet.value = data.logradouro;
            if (supplierNeighborhood) supplierNeighborhood.value = data.bairro;
            if (supplierCity) supplierCity.value = data.localidade;
            if (supplierState) supplierState.value = data.uf;
            if (supplierNumber) supplierNumber.focus();
        })
        .catch(error => {
            console.error('Erro ao buscar CEP:', error);
            alert('Erro ao buscar CEP. Tente novamente mais tarde.');
        });
}

function searchCNPJ() {
    const cnpj = document.getElementById('supplierDocument')?.value.replace(/\D/g, '');
    
    if (!cnpj || cnpj.length !== 14) {
        alert('CNPJ inv√°lido!');
        return;
    }
    
    fetch(`https://www.receitaws.com.br/v1/cnpj/${cnpj}`)
        .then(response => response.json())
        .then(data => {
            if (data.status === 'ERROR') {
                alert(data.message);
                return;
            }
            
            const supplierName = document.getElementById('supplierName');
            const supplierStreet = document.getElementById('supplierStreet');
            const supplierNumber = document.getElementById('supplierNumber');
            const supplierNeighborhood = document.getElementById('supplierNeighborhood');
            const supplierCity = document.getElementById('supplierCity');
            const supplierState = document.getElementById('supplierState');
            const supplierCEP = document.getElementById('supplierCEP');
            
            if (supplierName) supplierName.value = data.nome;
            
            if (data.logradouro) {
                if (supplierStreet) supplierStreet.value = data.logradouro;
                if (supplierNumber) supplierNumber.value = data.numero;
                if (supplierNeighborhood) supplierNeighborhood.value = data.bairro;
                if (supplierCity) supplierCity.value = data.municipio;
                if (supplierState) supplierState.value = data.uf;
                
                // Formatar o CEP
                if (supplierCEP) {
                    const cep = data.cep.replace(/\D/g, '');
                    let formattedCep = cep;
                    if (cep.length > 5) {
                        formattedCep = cep.substring(0, 5) + '-' + cep.substring(5);
                    }
                    supplierCEP.value = formattedCep;
                }
            }
        })
        .catch(error => {
            console.error('Erro ao buscar CNPJ:', error);
            alert('Erro ao buscar CNPJ. Tente novamente mais tarde.');
        });
}

// 8. Fun√ß√µes para gerenciamento de estoque
function loadInventory() {
    const tableBody = document.getElementById('inventoryTable')?.querySelector('tbody');
    if (!tableBody) return;
    
    // Aplicar filtros
    const filterCat = document.getElementById('filterCategory')?.value || '';
    const filterCode = document.getElementById('filterCode')?.value?.toLowerCase() || '';
    const filterSup = document.getElementById('filterSupplier')?.value || '';
    const filterStk = document.getElementById('filterStock')?.value || '';
    
    // Filtrar os itens
    const filteredItems = inventory.filter(item => {
        const categoryMatch = !filterCat || item.category === filterCat;
        const codeMatch = !filterCode || item.code.toLowerCase().includes(filterCode);
        const supplierMatch = !filterSup || item.supplier === filterSup;
        const stockMatch = !filterStk || 
            (filterStk === 'low' && item.quantity <= item.minQuantity) || 
            (filterStk === 'normal' && item.quantity > item.minQuantity);
        
        return categoryMatch && codeMatch && supplierMatch && stockMatch;
    });
    
    // Renderizar a tabela
    tableBody.innerHTML = filteredItems.map(item => {
        const isLowStock = item.quantity <= item.minQuantity;
        const totalValue = item.quantity * item.purchasePrice;
        
        return `
            <tr class="${isLowStock ? 'stock-low' : ''}" data-id="${item.id}">
                <td>${item.code}</td>
                <td>${item.photoUrl ? `<img src="${item.photoUrl}" class="thumbnail" onclick="viewPhoto('${item.photoUrl}')">` : ''}</td>
                <td>${item.name}</td>
                <td>${item.supplier || ''}</td>
                <td>${item.category}</td>
                <td>${item.subcategory || ''}</td>
                <td>${item.size || ''}</td>
                <td>${item.quantity}</td>
                <td>R$ ${item.purchasePrice.toFixed(2)}</td>
                <td>R$ ${item.salePrice.toFixed(2)}</td>
                <td>R$ ${totalValue.toFixed(2)}</td>
                <td>
                    <button class="btn-secondary btn-sm" onclick="editItem('${item.id}')">‚úèÔ∏è</button>
                    <button class="btn-danger btn-sm" onclick="removeItem('${item.id}')">üóëÔ∏è</button>
                </td>
            </tr>
        `;
    }).join('');
    
    // Atualizar totais
    updateSummary();
}

function editItem(id) {
    const item = inventory.find(i => i.id === id);
    if (!item) return;
    
    editingItemId = id;
    
    const itemCode = document.getElementById('itemCode');
    const itemName = document.getElementById('itemName');
    const itemSupplier = document.getElementById('itemSupplier');
    const itemCategory = document.getElementById('itemCategory');
    const itemSubcategory = document.getElementById('itemSubcategory');
    const itemSize = document.getElementById('itemSize');
    const itemQuantity = document.getElementById('itemQuantity');
    const itemMinQuantity = document.getElementById('itemMinQuantity');
    const itemPurchasePrice = document.getElementById('itemPurchasePrice');
    const itemSalePrice = document.getElementById('itemSalePrice');
    const sizeGroup = document.getElementById('sizeGroup');
    const photoPreview = document.getElementById('photoPreview');
    
    if (itemCode) itemCode.value = item.code;
    if (itemName) itemName.value = item.name;
    if (itemSupplier) itemSupplier.value = item.supplier || '';
    if (itemCategory) itemCategory.value = item.category;
    if (itemSubcategory) itemSubcategory.value = item.subcategory || '';
    if (itemSize) itemSize.value = item.size || '';
    if (itemQuantity) itemQuantity.value = item.quantity;
    if (itemMinQuantity) itemMinQuantity.value = item.minQuantity;
    if (itemPurchasePrice) itemPurchasePrice.value = item.purchasePrice;
    if (itemSalePrice) itemSalePrice.value = item.salePrice;
    
    // Mostrar grupo de tamanho se a categoria for "Roupas"
    if (sizeGroup) {
        if (item.category === 'Roupas') {
            sizeGroup.style.display = 'block';
        } else {
            sizeGroup.style.display = 'none';
        }
    }
    
    // Mostrar imagem se existir
    if (photoPreview && item.photoUrl) {
        photoPreview.innerHTML = `<img src="${item.photoUrl}" class="thumbnail">`;
    } else if (photoPreview) {
        photoPreview.innerHTML = '';
    }
    
    // Rolar para o formul√°rio
    const itemForm = document.getElementById('itemForm');
    if (itemForm) {
        itemForm.scrollIntoView({behavior: 'smooth'});
    }
}

function removeItem(id) {
    if (!confirm('Tem certeza que deseja remover este item?')) return;
    
    console.log("Tentando remover item com ID:", id);
    console.log("Invent√°rio antes da remo√ß√£o:", JSON.stringify(inventory));
    
    // Tentar remover itens problem√°ticos espec√≠ficos
    if (id.includes("KAFKA") || id.includes("fone de ouvido pokemon")) {
        const problemItems = inventory.filter(item => 
            item.name && (item.name.includes("KAFKA KAIJU") || item.name.includes("fone de ouvido pokemon"))
        );
        
        if (problemItems.length > 0) {
            problemItems.forEach(item => {
                const index = inventory.findIndex(i => i.id === item.id);
                if (index !== -1) {
                    inventory.splice(index, 1);
                }
            });
            
            saveData();
            loadInventory();
            checkLowStock();
            alert('Item removido com sucesso!');
            return;
        }
    }
    
    // Encontrar o √≠ndice do item no array inventory
    const index = inventory.findIndex(i => i.id === id);
    console.log("√çndice encontrado:", index);
    
    if (index !== -1) {
        // Remover o item do array
        inventory.splice(index, 1);
        
        console.log("Invent√°rio ap√≥s a remo√ß√£o:", JSON.stringify(inventory));
        
        // Salvar dados no localStorage
        saveData();
        
        // Recarregar o invent√°rio
        loadInventory();
        checkLowStock();
        
        alert('Item removido com sucesso!');
    } else {
        // Tentar remover por c√≥digo para os itens problem√°ticos
        const itemByCode = inventory.find(i => i.code && i.name && 
            (i.name.includes("KAFKA KAIJU") || i.name.includes("fone de ouvido pokemon")));
        
        if (itemByCode) {
            const codeIndex = inventory.findIndex(i => i.code === itemByCode.code);
            if (codeIndex !== -1) {
                inventory.splice(codeIndex, 1);
                saveData();
                loadInventory();
                checkLowStock();
                alert('Item removido com sucesso!');
            } else {
                alert('Item n√£o encontrado!');
            }
        } else {
            alert('Item n√£o encontrado!');
        }
    }
}

function viewPhoto(url) {
    const modal = document.createElement('div');
    modal.className = 'photo-modal';
    modal.innerHTML = `
        <div class="photo-modal-content">
            <span class="close-modal" onclick="this.parentElement.parentElement.remove()">&times;</span>
            <img src="${url}" alt="Foto do produto">
        </div>
    `;
    document.body.appendChild(modal);
    
    // Fechar modal ao clicar fora da imagem
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

function handleFileUpload(e) {
    const file = e.target.files[0];
    if (!file) return;
    
    console.log("Arquivo selecionado:", file.name);
    
    const reader = new FileReader();
    reader.onload = function(e) {
        console.log("Arquivo lido com sucesso");
        const photoPreview = document.getElementById('photoPreview');
        if (photoPreview) {
            photoPreview.innerHTML = `<img src="${e.target.result}" class="thumbnail">`;
            console.log("Preview atualizado");
        } else {
            console.log("Elemento photoPreview n√£o encontrado");
        }
    };
    
    reader.onerror = function(e) {
        console.error("Erro ao ler o arquivo:", e);
        alert("Erro ao processar a imagem. Por favor, tente novamente.");
    };
    
    try {
        reader.readAsDataURL(file);
    } catch (error) {
        console.error("Erro ao iniciar a leitura do arquivo:", error);
        alert("Erro ao processar a imagem. Por favor, tente novamente.");
    }
}

function handleItemForm(e) {
    e.preventDefault();
    
    const itemCode = document.getElementById('itemCode');
    const itemName = document.getElementById('itemName');
    const itemSupplier = document.getElementById('itemSupplier');
    const itemCategory = document.getElementById('itemCategory');
    const itemSubcategory = document.getElementById('itemSubcategory');
    const itemSize = document.getElementById('itemSize');
    const itemQuantity = document.getElementById('itemQuantity');
    const itemMinQuantity = document.getElementById('itemMinQuantity');
    const itemPurchasePrice = document.getElementById('itemPurchasePrice');
    const itemSalePrice = document.getElementById('itemSalePrice');
    const photoPreview = document.getElementById('photoPreview');
    
    if (!itemCode || !itemName || !itemCategory || !itemQuantity || 
        !itemMinQuantity || !itemPurchasePrice || !itemSalePrice) {
        alert('Erro ao processar o formul√°rio. Alguns elementos n√£o foram encontrados.');
        return;
    }
    
    const code = itemCode.value.trim();
    const name = itemName.value.trim();
    const supplier = itemSupplier.value.trim();
    const category = itemCategory.value.trim();
    const subcategory = itemSubcategory.value.trim();
    const size = itemSize.value.trim();
    const quantity = parseInt(itemQuantity.value, 10);
    const minQuantity = parseInt(itemMinQuantity.value, 10);
    const purchasePrice = parseFloat(itemPurchasePrice.value.replace(',', '.'));
    const salePrice = parseFloat(itemSalePrice.value.replace(',', '.'));
    const photoUrl = photoPreview?.querySelector('img')?.src || '';
    
    if (!code || !name || !category || isNaN(quantity) || isNaN(purchasePrice) || isNaN(salePrice)) {
        alert('Por favor, preencha todos os campos obrigat√≥rios.');
        return;
    }
    
    // Gerar um ID √∫nico para novos itens ou manter o atual para edi√ß√µes
    const id = editingItemId || Date.now().toString();
    
    const item = {
        id,
        code,
        name,
        supplier,
        category,
        subcategory,
        size,
        quantity,
        minQuantity,
        purchasePrice,
        salePrice,
        photoUrl
    };
    
    console.log("Item a ser adicionado/editado:", item);
    
    if (editingItemId) {
        const index = inventory.findIndex(item => item.id === editingItemId);
        if (index !== -1) {
            inventory[index] = item;
            alert('Item atualizado com sucesso!');
        }
        editingItemId = null;
    } else {
        inventory.push(item);
        alert('Item adicionado com sucesso!');
    }
    
    saveData();
    loadInventory();
    checkLowStock();
    
    // Limpar formul√°rio
    e.target.reset();
    if (photoPreview) photoPreview.innerHTML = '';
    
    const sizeGroup = document.getElementById('sizeGroup');
    if (sizeGroup) sizeGroup.style.display = 'none';
}

// 9. Fun√ß√µes para vendas e carrinho

// Fun√ß√£o para buscar produto por c√≥digo
function searchProductByCode() {
    const codeInput = document.getElementById('productCodeSearch');
    const code = codeInput.value.trim();
    
    if (!code) {
        alert('Por favor, digite um c√≥digo de produto.');
        return;
    }
    
    const product = inventory.find(item => item.code === code);
    
    if (!product) {
        alert('Produto n√£o encontrado!');
        document.getElementById('productSummary').style.display = 'none';
        currentSearchedProduct = null;
        return;
    }
    
    // Exibir o resumo do produto
    document.getElementById('summaryCode').textContent = product.code;
    document.getElementById('summaryPrice').textContent = product.salePrice.toFixed(2);
    document.getElementById('summaryStock').textContent = product.quantity;
    document.getElementById('summaryName').textContent = product.name;
    
    document.getElementById('productSummary').style.display = 'block';
    currentSearchedProduct = product;
    
    // Focar no campo de quantidade
    document.getElementById('productQuantity').focus();
}

// Fun√ß√£o para adicionar produto ao carrinho
function addCurrentProductToCart() {
    if (!currentSearchedProduct) {
        alert('Por favor, busque um produto primeiro.');
        return;
    }
    
    const quantityInput = document.getElementById('productQuantity');
    const quantity = parseInt(quantityInput.value, 10);
    
    if (isNaN(quantity) || quantity <= 0) {
        alert('Por favor, informe uma quantidade v√°lida.');
        return;
    }
    
    if (quantity > currentSearchedProduct.quantity) {
        alert(`Quantidade insuficiente em estoque. Dispon√≠vel: ${currentSearchedProduct.quantity}`);
        return;
    }
    
    // Verificar se o produto j√° est√° no carrinho
    const existingItemIndex = cart.findIndex(item => item.id === currentSearchedProduct.id);
    
    if (existingItemIndex !== -1) {
        // Se a quantidade total excede o estoque
        if (cart[existingItemIndex].quantity + quantity > currentSearchedProduct.quantity) {
            alert(`Quantidade insuficiente em estoque. Dispon√≠vel: ${currentSearchedProduct.quantity}`);
            return;
        }
        
        cart[existingItemIndex].quantity += quantity;
    } else {
        // Adicionar novo item ao carrinho
        cart.push({
            id: currentSearchedProduct.id,
            code: currentSearchedProduct.code,
            name: currentSearchedProduct.name,
            price: currentSearchedProduct.salePrice,
            quantity: quantity,
            size: currentSearchedProduct.size || ''
        });
    }
    
    // Atualizar exibi√ß√£o do carrinho
    updateCart();
    
    // Limpar campos
    document.getElementById('productCodeSearch').value = '';
    document.getElementById('productQuantity').value = '1';
    document.getElementById('productSummary').style.display = 'none';
    currentSearchedProduct = null;
    
    // Focar no campo de c√≥digo para nova pesquisa
    document.getElementById('productCodeSearch').focus();
}

// Atualizar exibi√ß√£o do carrinho
function updateCart() {
    const cartList = document.getElementById('cartItems');
    if (!cartList) return;
    
    let total = 0;
    
    cartList.innerHTML = cart.map(item => {
        const itemTotal = item.quantity * item.price;
        total += itemTotal;
        
        return `
            <div class="cart-item">
                <div class="cart-item-info">
                    <div class="cart-item-name">${item.name}</div>
                    <div class="cart-item-details">
                        ${item.code} ${item.size ? ` - ${item.size}` : ''}
                    </div>
                </div>
                <div class="cart-item-quantity">
                    <button class="btn-sm" onclick="decrementCartItem('${item.id}')">-</button>
                    <span>${item.quantity}</span>
                    <button class="btn-sm" onclick="incrementCartItem('${item.id}')">+</button>
                </div>
                <div class="cart-item-price">R$ ${item.price.toFixed(2)}</div>
                <div class="cart-item-total">R$ ${itemTotal.toFixed(2)}</div>
                <button class="btn-danger btn-sm" onclick="removeFromCart('${item.id}')">üóëÔ∏è</button>
            </div>
        `;
    }).join('');
    
    // Se o carrinho estiver vazio, mostrar mensagem
    if (cart.length === 0) {
        cartList.innerHTML = '<div class="empty-cart">Carrinho vazio</div>';
    }
    
    const cartTotal = document.getElementById('cartTotal');
    const checkoutBtn = document.getElementById('checkoutBtn');
    
    if (cartTotal) cartTotal.textContent = `R$ ${total.toFixed(2)}`;
    if (checkoutBtn) checkoutBtn.disabled = cart.length === 0;
}

// Fun√ß√£o para mostrar/ocultar op√ß√µes de parcelamento
function toggleInstallments() {
    const paymentMethod = document.getElementById('paymentMethod').value;
    const installmentsDiv = document.getElementById('creditInstallments');
    
    selectedPaymentMethod = paymentMethod;
    
    if (paymentMethod === 'credit') {
        installmentsDiv.style.display = 'block';
    } else {
        installmentsDiv.style.display = 'none';
    }
}

function incrementCartItem(id) {
    const cartItem = cart.find(item => item.id === id);
    const inventoryItem = inventory.find(i => i.id === id);
    
    if (!cartItem || !inventoryItem) return;
    
    if (cartItem.quantity < inventoryItem.quantity) {
        cartItem.quantity++;
        updateCart();
    } else {
        alert('Quantidade m√°xima atingida para este item!');
    }
}

function decrementCartItem(id) {
    const cartItem = cart.find(item => item.id === id);
    
    if (!cartItem) return;
    
    if (cartItem.quantity > 1) {
        cartItem.quantity--;
        updateCart();
    } else {
        removeFromCart(id);
    }
}

function removeFromCart(id) {
    const index = cart.findIndex(item => item.id === id);
    
    if (index !== -1) {
        cart.splice(index, 1);
        updateCart();
    }
}

function clearCart() {
    cart = [];
    updateCart();
}

function checkout() {
    if (cart.length === 0) {
        alert('O carrinho est√° vazio!');
        return;
    }
    
    const paymentMethod = document.getElementById('paymentMethod').value;
    const installments = paymentMethod === 'credit' ? 
        parseInt(document.getElementById('installments').value, 10) : 1;
    
    const saleId = ++lastSaleId;
    const date = new Date().toISOString();
    const items = [...cart];
    const total = cart.reduce((sum, item) => sum + (item.quantity * item.price), 0);
    
    const sale = {
        id: saleId,
        date,
        items,
        total,
        paymentMethod,
        installments,
        seller: currentUser
    };
    
    // Atualizar estoque
    cart.forEach(cartItem => {
        const inventoryItem = inventory.find(i => i.id === cartItem.id);
        if (inventoryItem) {
            inventoryItem.quantity -= cartItem.quantity;
        }
    });
    
    // Salvar venda
    sales.push(sale);
    
    // Limpar carrinho
    cart = [];
    
    // Salvar dados
    saveData();
    
    // Atualizar interface
    loadInventory();
    updateCart();
    alert(`Venda #${saleId} registrada com sucesso!`);
    
    // Perguntar se quer gerar recibo
    if (confirm('Deseja gerar um recibo para esta venda?')) {
        generateReceipt(sale);
    }
}

// 10. Fun√ß√µes para relat√≥rios e exporta√ß√µes
function generateReport() {
    const salesChart = document.getElementById('salesChart');
    if (!salesChart) return;
    
    const stockChart = document.getElementById('stockChart');
    
    // Relat√≥rio de vendas por data
    const lastMonthSales = sales.filter(sale => {
        const saleDate = new Date(sale.date);
        const monthAgo = new Date();
        monthAgo.setMonth(monthAgo.getMonth() - 1);
        return saleDate >= monthAgo;
    });
    
    // Agrupar vendas por dia
    const salesByDay = {};
    lastMonthSales.forEach(sale => {
        const day = new Date(sale.date).toLocaleDateString();
        salesByDay[day] = (salesByDay[day] || 0) + sale.total;
    });
    
    // Preparar dados para o gr√°fico
    const days = Object.keys(salesByDay);
    const salesAmounts = Object.values(salesByDay);
    
    // Limpar gr√°fico anterior se existir
    if (chart) {
        chart.destroy();
    }
    
    // Criar gr√°fico de vendas
    chart = new Chart(salesChart, {
        type: 'line',
        data: {
            labels: days,
            datasets: [{
                label: 'Vendas por Dia (R$)',
                data: salesAmounts,
                backgroundColor: 'rgba(52, 152, 219, 0.2)',
                borderColor: 'rgba(52, 152, 219, 1)',
                borderWidth: 2,
                tension: 0.3
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    
    // Criar gr√°fico de estoque por categoria
    const stockByCategory = {};
    inventory.forEach(item => {
        stockByCategory[item.category] = (stockByCategory[item.category] || 0) + item.quantity;
    });
    
    const categories = Object.keys(stockByCategory);
    const stockQuantities = Object.values(stockByCategory);
    
    if (stockChart) {
        new Chart(stockChart, {
            type: 'bar',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Quantidade em Estoque',
                    data: stockQuantities,
                    backgroundColor: 'rgba(46, 204, 113, 0.2)',
                    borderColor: 'rgba(46, 204, 113, 1)',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }
    
    // Preencher tabela de produtos mais vendidos
    const soldProducts = {};
    sales.forEach(sale => {
        sale.items.forEach(item => {
            soldProducts[item.code] = (soldProducts[item.code] || 0) + item.quantity;
        });
    });
    
    // Converter para array e ordenar
    const soldProductsArray = Object.entries(soldProducts).map(([code, quantity]) => {
        const item = inventory.find(i => i.code === code) || sales.flatMap(s => s.items).find(i => i.code === code);
        return {
            code,
            name: item?.name || 'Produto Removido',
            quantity
        };
    }).sort((a, b) => b.quantity - a.quantity).slice(0, 5);
    
    // Preencher tabela
    const topProductsTable = document.getElementById('topProductsTable');
    if (topProductsTable) {
        const tbody = topProductsTable.querySelector('tbody');
        if (tbody) {
            tbody.innerHTML = soldProductsArray.map(product => `
                <tr>
                    <td>${product.code}</td>
                    <td>${product.name}</td>
                    <td>${product.quantity}</td>
                </tr>
            `).join('') || '<tr><td colspan="3">Nenhum produto vendido</td></tr>';
        }
    }
    
    // Valores totais
    const totalInventoryValue = document.getElementById('totalInventoryValue');
    const totalSalesValue = document.getElementById('totalSalesValue');
    const averageSaleValue = document.getElementById('averageSaleValue');
    const lowStockCount = document.getElementById('lowStockCount');
    
    if (totalInventoryValue) {
        totalInventoryValue.textContent = 
            `R$ ${inventory.reduce((sum, item) => sum + (item.quantity * item.purchasePrice), 0).toFixed(2)}`;
    }
    
    if (totalSalesValue) {
        totalSalesValue.textContent = 
            `R$ ${sales.reduce((sum, sale) => sum + sale.total, 0).toFixed(2)}`;
    }
    
    if (averageSaleValue) {
        averageSaleValue.textContent = 
            `R$ ${(sales.length ? sales.reduce((sum, sale) => sum + sale.total, 0) / sales.length : 0).toFixed(2)}`;
    }
    
    if (lowStockCount) {
        lowStockCount.textContent = 
            inventory.filter(item => item.quantity <= item.minQuantity).length.toString();
    }
}

// Atualizar fun√ß√£o generateReceipt para incluir forma de pagamento
function generateReceipt(sale) {
    const doc = new jsPDF();
    
    // T√≠tulo
    doc.setFontSize(18);
    doc.text('Recibo de Venda', 105, 15, { align: 'center' });
    
    // Informa√ß√µes da venda
    doc.setFontSize(12);
    doc.text(`Venda #${sale.id}`, 20, 30);
    doc.text(`Data: ${new Date(sale.date).toLocaleString()}`, 20, 37);
    doc.text(`Vendedor: ${sale.seller}`, 20, 44);
    
    // Forma de pagamento
    let paymentText = '';
    switch(sale.paymentMethod) {
        case 'credit':
            paymentText = `Cart√£o de Cr√©dito - ${sale.installments}x`;
            break;
        case 'debit':
            paymentText = 'Cart√£o de D√©bito';
            break;
        case 'cash':
            paymentText = 'Dinheiro';
            break;
        case 'pix':
            paymentText = 'PIX';
            break;
    }
    doc.text(`Forma de pagamento: ${paymentText}`, 20, 51);
    
    // Itens
    const tableData = sale.items.map(item => [
        item.code,
        item.name,
        item.quantity,
        `R$ ${item.price.toFixed(2)}`,
        `R$ ${(item.quantity * item.price).toFixed(2)}`
    ]);
    
    doc.autoTable({
        head: [['C√≥digo', 'Produto', 'Qtd', 'Pre√ßo Unit.', 'Total']],
        body: tableData,
        startY: 60,
        theme: 'grid',
        headStyles: {
            fillColor: [52, 152, 219],
            textColor: 255
        },
        alternateRowStyles: {
            fillColor: [240, 240, 240]
        }
    });
    
    // Total
    const finalY = doc.previousAutoTable.finalY + 10;
    doc.setFontSize(14);
    doc.text(`Total: R$ ${sale.total.toFixed(2)}`, 150, finalY, { align: 'right' });
    
    // Salvar o PDF
    doc.save(`Recibo_Venda_${sale.id}.pdf`);
}

function exportToExcel() {
    // Criar cabe√ßalhos da tabela
    const headers = [
        'C√≥digo', 'Descri√ß√£o', 'Fornecedor', 'Categoria', 'Subcategoria',
        'Tamanho', 'Quantidade', 'Pre√ßo Compra', 'Pre√ßo Venda', 'Valor Total'
    ];
    
    // Aplicar filtros atuais
    const filterCat = document.getElementById('filterCategory')?.value || '';
    const filterCode = document.getElementById('filterCode')?.value?.toLowerCase() || '';
    const filterSup = document.getElementById('filterSupplier')?.value || '';
    const filterStk = document.getElementById('filterStock')?.value || '';
    
    // Filtrar os itens
    const filteredItems = inventory.filter(item => {
        const categoryMatch = !filterCat || item.category === filterCat;
        const codeMatch = !filterCode || item.code.toLowerCase().includes(filterCode);
        const supplierMatch = !filterSup || item.supplier === filterSup;
        const stockMatch = !filterStk || 
            (filterStk === 'low' && item.quantity <= item.minQuantity) || 
            (filterStk === 'normal' && item.quantity > item.minQuantity);
        
        return categoryMatch && codeMatch && supplierMatch && stockMatch;
    });
    
    // Preparar dados para o Excel
    const data = filteredItems.map(item => [
        item.code,
        item.name,
        item.supplier || '',
        item.category,
        item.subcategory || '',
        item.size || '',
        item.quantity,
        item.purchasePrice.toFixed(2),
        item.salePrice.toFixed(2),
        (item.quantity * item.purchasePrice).toFixed(2)
    ]);
    
    // Adicionar totais
    data.push([]);
    data.push([
        '', '', '', '', '', '',
        'Total Itens:',
        filteredItems.reduce((sum, item) => sum + item.quantity, 0),
        'Valor Total:',
        filteredItems.reduce((sum, item) => sum + (item.quantity * item.purchasePrice), 0).toFixed(2)
    ]);
    
    // Criar planilha
    const ws = XLSX.utils.aoa_to_sheet([headers, ...data]);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Estoque');
    
    // Gerar arquivo com data atual
    const date = new Date().toLocaleDateString().replace(/\//g, '-');
    XLSX.writeFile(wb, `Estoque_${date}.xlsx`);
}

function exportToPDF() {
    const doc = new jsPDF();
    
    // T√≠tulo
    doc.setFontSize(18);
    doc.text('Relat√≥rio de Estoque', 105, 15, { align: 'center' });
    doc.setFontSize(12);
    doc.text(`Data: ${new Date().toLocaleDateString()}`, 105, 22, { align: 'center' });
    
    // Aplicar filtros atuais
    const filterCat = document.getElementById('filterCategory')?.value || '';
    const filterCode = document.getElementById('filterCode')?.value?.toLowerCase() || '';
    const filterSup = document.getElementById('filterSupplier')?.value || '';
    const filterStk = document.getElementById('filterStock')?.value || '';
    
    // Filtrar os itens
    const filteredItems = inventory.filter(item => {
        const categoryMatch = !filterCat || item.category === filterCat;
        const codeMatch = !filterCode || item.code.toLowerCase().includes(filterCode);
        const supplierMatch = !filterSup || item.supplier === filterSup;
        const stockMatch = !filterStk || 
            (filterStk === 'low' && item.quantity <= item.minQuantity) || 
            (filterStk === 'normal' && item.quantity > item.minQuantity);
        
        return categoryMatch && codeMatch && supplierMatch && stockMatch;
    });
    
    // Preparar dados para a tabela
    const tableData = filteredItems.map(item => [
        item.code,
        item.name.substring(0, 20) + (item.name.length > 20 ? '...' : ''),
        item.category,
        item.quantity.toString(),
        `R$ ${item.purchasePrice.toFixed(2)}`,
        `R$ ${item.salePrice.toFixed(2)}`,
        `R$ ${(item.quantity * item.purchasePrice).toFixed(2)}`
    ]);
    
    // Adicionar tabela
    doc.autoTable({
        head: [['C√≥digo', 'Descri√ß√£o', 'Categoria', 'Qtd', 'Pre√ßo Compra', 'Pre√ßo Venda', 'Valor Total']],
        body: tableData,
        startY: 30,
        theme: 'grid',
        headStyles: {
            fillColor: [52, 152, 219],
            textColor: 255
        },
        alternateRowStyles: {
            fillColor: [240, 240, 240]
        },
        margin: { top: 30 }
    });
    
    // Adicionar totais na parte inferior
    const totalItems = filteredItems.reduce((sum, item) => sum + item.quantity, 0);
    const totalValue = filteredItems.reduce((sum, item) => sum + (item.quantity * item.purchasePrice), 0);
    const finalY = doc.previousAutoTable.finalY + 10;
    
    doc.text(`Total de Itens: ${totalItems}`, 20, finalY);
    doc.text(`Valor Total: R$ ${totalValue.toFixed(2)}`, 20, finalY + 7);
    
    // Gerar arquivo com data atual
    const date = new Date().toLocaleDateString().replace(/\//g, '-');
    doc.save(`Estoque_${date}.pdf`);
}

// 11. Utilit√°rios e fun√ß√µes de suporte
function saveData() {
    localStorage.setItem('inventory', JSON.stringify(inventory));
    localStorage.setItem('sales', JSON.stringify(sales));
    localStorage.setItem('suppliers', JSON.stringify(suppliers));
    localStorage.setItem('categories', JSON.stringify(categories));
    localStorage.setItem('lastSaleId', lastSaleId.toString());
}

function updateSummary() {
    const totalItems = document.getElementById('totalItems');
    const totalValue = document.getElementById('totalValue');
    const lowStockItems = document.getElementById('lowStockItems');
    
    // Total de itens em estoque
    const totalItemsCount = inventory.reduce((sum, item) => sum + item.quantity, 0);
    // Valor total de compras (pre√ßo de compra * quantidade)
    const totalPurchaseValue = inventory.reduce((sum, item) => sum + (item.quantity * item.purchasePrice), 0);
    // Valor potencial de vendas (pre√ßo de venda * quantidade)
    const totalPotentialSalesValue = inventory.reduce((sum, item) => sum + (item.quantity * item.salePrice), 0);
    
    if (totalItems) {
        totalItems.textContent = totalItemsCount;
    }
    
    if (totalValue) {
        totalValue.textContent = `R$ ${totalPurchaseValue.toFixed(2)}`;
    }
    
    if (lowStockItems) {
        lowStockItems.textContent = inventory.filter(item => item.quantity <= item.minQuantity).length;
    }
    
    // Atualizando os totais na √°rea de resumo do dashboard
    const totalEmEstoque = document.getElementById('totalEmEstoque')};

sw.js

const CACHE_NAME = 'estoque-vendas-v3';
const ASSETS_TO_CACHE = [
  '/',
  '/index.html',
  '/style.css',
  '/script.js',
  '/manifest.json',
  'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js',
  'https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js',
  'https://cdn.sheetjs.com/xlsx-0.20.0/package/dist/xlsx.full.min.js',
  'https://cdn.jsdelivr.net/npm/chart.js',
  '/icons/icon-192x192.png',
  '/icons/icon-512x512.png',
  '/icons/icon-144x144.png',
  '/icons/icon-96x96.png',
  '/icons/icon-72x72.png'
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Cache aberto');
        return cache.addAll(ASSETS_TO_CACHE)
          .catch(error => {
            console.error('Falha ao adicionar ao cache:', error);
          });
      })
  );
});

self.addEventListener('fetch', event => {
  // N√£o cachear requisi√ß√µes de API ou dados din√¢micos
  if (event.request.url.includes('/api/') || event.request.method !== 'GET') {
    return fetch(event.request);
  }

  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // Retorna do cache se encontrado, sen√£o faz fetch
        return response || fetch(event.request)
          .then(fetchResponse => {
            // Adiciona ao cache para pr√≥ximas requisi√ß√µes
            return caches.open(CACHE_NAME)
              .then(cache => {
                cache.put(event.request.url, fetchResponse.clone());
                return fetchResponse;
              });
          })
          .catch(error => {
            console.error('Fetch falhou:', error);
            // Pode retornar uma p√°gina offline customizada aqui
          });
      })
  );
});

self.addEventListener('activate', event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            console.log('Removendo cache antigo:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
    .then(() => {
      // Ativa o service worker imediatamente
      return self.clients.claim();
    })
  );
});

// Adiciona suporte a mensagens para atualiza√ß√£o do cache
self.addEventListener('message', event => {
  if (event.data.action === 'skipWaiting') {
    self.skipWaiting();
  }
});

json

{
  "name": "Controle de Estoque e Vendas",
  "short_name": "EstoqueVendas",
  "start_url": "/",
  "display": "standalone",
  "orientation": "portrait-primary",
  "background_color": "#ffffff",
  "theme_color": "#3498db",
  "description": "Aplicativo para controle de estoque e vendas",
  "icons": [
    {
      "src": "icons/icon-72x72.png",
      "sizes": "72x72",
      "type": "image/png"
    },
    {
      "src": "icons/icon-96x96.png",
      "sizes": "96x96",
      "type": "image/png"
    },
    {
      "src": "icons/icon-144x144.png",
      "sizes": "144x144",
      "type": "image/png"
    },
    {
      "src": "icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "screenshots": [
    {
      "src": "screenshots/tela1.png",
      "sizes": "1080x1920",
      "type": "image/png",
      "description": "Tela de gest√£o de estoque"
    }
  ]
}

offline.html

<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Aplicativo Offline</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      padding: 20px;
      background-color: #f5f5f5;
    }
    .offline-container {
      margin-top: 50px;
    }
  </style>
</head>
<body>
  <div class="offline-container">
    <h1>üì∂ Voc√™ est√° offline</h1>
    <p>Algumas funcionalidades podem estar limitadas.</p>
    <p>Quando a conex√£o for restabelecida, atualize a p√°gina.</p>
  </div>
</body>
</html>